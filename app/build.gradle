apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId "com.example.httpdemo"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        ndk {
//            //noinspection ChromeOsAbiSupport
//            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86'
//        }

        // 项目的初始化资源
        resValue("string", "DEEPLINK_SCHEME", "shiqj")
        resValue("string", "DEEPLINK_HOST", "http")
        resValue("string", "DEEPLINK_PATH", "/shiqj")
        buildConfigField "String", "APPLICATION_ID", "\"${rootProject.ext.android.applicationId}\""

        manifestPlaceholders = [
                "DEEPLINK_SCHEME": "${scheme}",
                "DEEPLINK_HOST": "${host}",
                "DEEPLINK_PATH": "${host_path}"
        ]
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    // 主要用于指定Java源代码的兼容性级别。
    // 通过配置compileOptions，开发者可以确保代码在不同版本的Android设备上具有更好的兼容性和性能。
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/*'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    implementation project(':Httplibrary')
    implementation project(':keyboard')
    implementation project(':keyboard2')
    implementation project(':keyboard3')

    // + 表示使用最新版本的依赖库
    implementation('com.umeng.umsdk:common:+')
    implementation('com.umeng.umsdk:asms:+')
    implementation('com.umeng.umsdk:push:+')

}


//集成华为推送
apply plugin: 'com.huawei.agconnect'
dependencies {
    api 'com.umeng.umsdk:huawei-umengaccs:+'
    api 'com.huawei.hms:push:6.12.0.300'
}

//集成小米推送
dependencies {
    api 'com.umeng.umsdk:xiaomi-umengaccs:+'
    api 'com.umeng.umsdk:xiaomi-push:+'
}

//集成vivo推送
dependencies {
    api 'com.umeng.umsdk:vivo-umengaccs:+'
    api 'com.umeng.umsdk:vivo-push:+'
}

//集成OPPO推送
dependencies {
    api 'com.umeng.umsdk:oppo-umengaccs:+'
    api 'com.umeng.umsdk:oppo-push:+'

    //如果编译过程中出现冲突，可通过exclude移除冲突的module
//    api('com.umeng.umsdk:oppo-push:3.4.0') {
//        exclude group: 'androidx.annotation', module: 'annotation'
//        exclude group: 'commons-codec', module: 'commons-codec'
//        exclude group: 'com.google.code.gson', module: 'gson'
//    }
}

//集成魅族推送
dependencies {
    api 'com.umeng.umsdk:meizu-umengaccs:+'
    api 'com.umeng.umsdk:meizu-push:+'
}

//集成荣耀推送
dependencies {
    api 'com.umeng.umsdk:honor-umengaccs:+'
    api 'com.umeng.umsdk:honor-push:+'
    implementation 'androidx.activity:activity:1.8.0'
}


//集成FCM推送
//apply plugin: 'com.google.gms.google-services'
//dependencies {
//    api 'com.umeng.umsdk:fcm-umengaccs:+'
//    api platform('com.google.firebase:firebase-bom:32.4.0')
//    api 'com.google.firebase:firebase-analytics'
//    api 'com.google.firebase:firebase-messaging'
//}














